{"ast":null,"code":"var _jsxFileName = \"/Users/anupjaiswal/Desktop/e_commerce/src/contexts/orderContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useReducer, useEffect } from \"react\";\nimport { orderReducer } from \"../reducers/orderReducer\";\nimport { useAuth } from \"./authContext\";\nimport { getOrderService } from \"../services/orderServices/getOrderService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrderContext = /*#__PURE__*/createContext();\n\nconst OrderProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [orderState, dispatchOrder] = useReducer(orderReducer, {\n    orders: []\n  });\n  const {\n    token\n  } = useAuth();\n  useEffect(() => {\n    if (token) {\n      (async () => {\n        try {\n          const {\n            data,\n            status\n          } = await getOrderService(token);\n\n          if (status === 200) {\n            dispatchOrder({\n              type: \"GET_ORDERS\",\n              payload: data.order\n            });\n          }\n        } catch (err) {\n          console.error(err);\n        }\n      })();\n    }\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(OrderContext.Provider, {\n    value: {\n      orderState,\n      dispatchOrder\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OrderProvider, \"Orv9tKYJZpNGnBWMFRASVHSlqcs=\", false, function () {\n  return [useAuth];\n});\n\n_c = OrderProvider;\n\nconst useOrder = () => {\n  _s2();\n\n  return useContext(OrderContext);\n};\n\n_s2(useOrder, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { OrderProvider, useOrder };\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderProvider\");","map":{"version":3,"sources":["/Users/anupjaiswal/Desktop/e_commerce/src/contexts/orderContext.js"],"names":["createContext","useContext","useReducer","useEffect","orderReducer","useAuth","getOrderService","OrderContext","OrderProvider","children","orderState","dispatchOrder","orders","token","data","status","type","payload","order","err","console","error","useOrder"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,UAApC,EAAgDC,SAAhD,QAAiE,OAAjE;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,eAAT,QAAgC,2CAAhC;;AAEA,MAAMC,YAAY,gBAAGP,aAAa,EAAlC;;AAEA,MAAMQ,aAAa,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACtC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,UAAU,CAACE,YAAD,EAAe;AAAEQ,IAAAA,MAAM,EAAE;AAAV,GAAf,CAA9C;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYR,OAAO,EAAzB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,KAAJ,EAAW;AACT,OAAC,YAAY;AACX,YAAI;AACF,gBAAM;AAAEC,YAAAA,IAAF;AAAQC,YAAAA;AAAR,cAAmB,MAAMT,eAAe,CAACO,KAAD,CAA9C;;AAEA,cAAIE,MAAM,KAAK,GAAf,EAAoB;AAClBJ,YAAAA,aAAa,CAAC;AAAEK,cAAAA,IAAI,EAAE,YAAR;AAAsBC,cAAAA,OAAO,EAAEH,IAAI,CAACI;AAApC,aAAD,CAAb;AACD;AACF,SAND,CAME,OAAOC,GAAP,EAAY;AACZC,UAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,OAVD;AAWD;AACF,GAdQ,EAcN,CAACN,KAAD,CAdM,CAAT;AAgBA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEH,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAA9B;AAAA,cACGF;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAzBD;;GAAMD,a;UAEcH,O;;;KAFdG,a;;AA2BN,MAAMc,QAAQ,GAAG;AAAA;;AAAA,SAAMrB,UAAU,CAACM,YAAD,CAAhB;AAAA,CAAjB;;IAAMe,Q;;AAEN,SAASd,aAAT,EAAwBc,QAAxB","sourcesContent":["import { createContext, useContext, useReducer, useEffect } from \"react\";\nimport { orderReducer } from \"../reducers/orderReducer\";\nimport { useAuth } from \"./authContext\";\nimport { getOrderService } from \"../services/orderServices/getOrderService\";\n\nconst OrderContext = createContext();\n\nconst OrderProvider = ({ children }) => {\n  const [orderState, dispatchOrder] = useReducer(orderReducer, { orders: [] });\n  const { token } = useAuth();\n\n  useEffect(() => {\n    if (token) {\n      (async () => {\n        try {\n          const { data, status } = await getOrderService(token);\n\n          if (status === 200) {\n            dispatchOrder({ type: \"GET_ORDERS\", payload: data.order });\n          }\n        } catch (err) {\n          console.error(err);\n        }\n      })();\n    }\n  }, [token]);\n\n  return (\n    <OrderContext.Provider value={{ orderState, dispatchOrder }}>\n      {children}\n    </OrderContext.Provider>\n  );\n};\n\nconst useOrder = () => useContext(OrderContext);\n\nexport { OrderProvider, useOrder };\n"]},"metadata":{},"sourceType":"module"}